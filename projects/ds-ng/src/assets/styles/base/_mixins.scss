@import "./fonts";
@import "./measures";
@import "./rem";

// Reset Element
@mixin resetElement() {
  line-height: 1.5;
  box-sizing: border-box;

  &:focus {
    @include focusElement();
  }
}

@mixin focusElement($inset: outset) {
  outline: 0;
}

@mixin button($type: primary) {
  @include font(5, regular);
  align-items: center;
  border: none;
  border-radius: $border-radius-sm;
  display: flex;
  height: rem_calc(36);
  justify-content: center;
  padding: $spacing-size-md $spacing-size-base;

  bmb-icon {
    font-size: rem_calc(16);
    height: rem_calc(16);
  }

  &[device="desktop"] {
    padding: $spacing-size-md $spacing-size-xxl;
  }

  &[size="large"] {
    height: rem_calc(48);
    width: 100%;
  }

  &[case="true"] {
    display: grid;
    grid-template-columns: auto 1fr;
    align-items: center;
    padding-top: 0;
    padding-bottom: 0;

    &[icon-position="right"],
    &[ng-reflect-icon-position="right"] {
      grid-template-columns: 1fr auto;
    }
  }

  &:focus,
  &:focus:hover {
    @include focusElement();
  }

  &:disabled {
    cursor: not-allowed;
  }

  @if $type == primary {
    background-color: RGBA(var(--color-mariner-700));
    color: RGBA(var(--color-white));

    bmb-icon {
      color: RGBA(var(--color-white));
    }

    &:hover,
    &:focus-visible {
      background-color: RGBA(var(--color-mariner-800));
    }

    &:active {
      background-color: RGBA(var(--color-mariner-500));
    }

    &:disabled {
      background-color: RGBA(var(--color-charade-300));
      color: RGBA(var(--color-white-tint));
    }
  } @else if $type == alternative {
    background-color: RGBA(var(--color-charade-50));
    color: RGBA(var(--color-charade-900));

    bmb-icon {
      color: RGBA(var(--color-charade-900));
    }

    &:hover,
    &:focus-visible {
      background-color: RGBA(var(--color-charade-100));
    }

    &:active {
      background-color: RGBA(var(--color-charade-500));
      color: RGBA(var(--color-charade-50));

      bmb-icon {
        color: RGBA(var(--color-charade-50));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  } @else if $type == secondary {
    background-color: transparent;
    border: rem_calc(1) solid RGBA(var(--color-black));
    color: RGBA(var(--color-black));

    bmb-icon {
      color: RGBA(var(--color-black));
    }

    &:hover,
    &:focus-visible {
      border-width: rem_calc(2);
    }

    &:active {
      background-color: RGBA(var(--color-black));
      color: RGBA(var(--color-white));

      bmb-icon {
        color: RGBA(var(--color-white));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  } @else if $type == destructive {
    background-color: transparent;
    border: rem_calc(1) solid RGBA(var(--color-red-primary));
    color: RGBA(var(--color-red-primary));

    bmb-icon {
      color: RGBA(var(--color-red-primary));
    }

    &:hover,
    &:focus-visible {
      border-width: rem_calc(2);
    }

    &:active {
      background-color: RGBA(var(--color-red-primary));
      color: RGBA(var(--color-white));

      bmb-icon {
        color: RGBA(var(--color-white));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  }
}

@mixin input() {
  @include resetElement();
  @include font(3, medium);
  appearance: none;
  border-radius: $spacing-size-base;

  &:focus,
  &:focus:hover {
    @include focusElement();
  }
}

@mixin badge($type: light) {
  @include font(2, semibold);
  align-items: center;
  border-radius: $border-radius-xs;
  color: RGBA(var(--color-white));
  display: flex;
  justify-content: center;
  min-height: rem_calc(20);
  padding: 0 $spacing-size-md;
  width: fit-content;

  @if $type == light {
    background-color: RGBA(var(--color-charade-50));
    color: RGBA(var(--color-charade-500));
  } @else if $type == primary {
    background-color: RGBA(var(--color-mariner-500));
  } @else if $type == secondary {
    background-color: RGBA(var(--color-charade-100));
    color: RGBA(var(--color-charade-950));
  } @else if $type == success {
    background-color: RGBA(var(--color-green-primary));
  } @else if $type == info {
    background-color: RGBA(var(--color-purple-primary));
  } @else if $type == warning {
    background-color: RGBA(var(--color-yellow-primary));
  } @else if $type == danger {
    background-color: RGBA(var(--color-red-primary));
  } @else if $type == dark {
    background-color: RGBA(var(--color-charade-950));
  }
}
