@use "fonts" as fonts;
@use "rem" as rem;

// Media query
@mixin media-query($breakpoint) {
  $breakpoint-value: if(
    type-of($breakpoint) == number,
    $breakpoint,
    str-slice($breakpoint, 1, -2)
  );
  @media only screen and (min-width: #{$breakpoint-value}px) {
    @content;
  }
}
// Reset Element
@mixin resetElement() {
  box-sizing: border-box;
  line-height: 1.5;

  &:focus {
    @include focusElement();
  }
}

// Focus for button and input
@mixin focusElement($inset: outset) {
  outline: 0;
}

// Button styles
@mixin button($appearance: primary) {
  @include fonts.font(5, regular);
  align-items: center;
  border: none;
  border-radius: rem.rem_calc(8);
  display: flex;
  height: rem.rem_calc(36);
  justify-content: center;
  padding: rem.rem_calc(0 16);
  gap: rem.rem_calc(4);

  bmb-icon {
    font-size: rem.rem_calc(16);
    height: rem.rem_calc(20);
  }

  &[size="large"] {
    height: rem.rem_calc(48);
    width: 100%;
  }

  &[case="true"] {
    align-items: center;
    display: grid;
    grid-template-columns: auto 1fr;
    padding-bottom: 0;
    padding-top: 0;

    &[position="right"],
    &[ng-reflect-position="right"] {
      grid-template-columns: 1fr auto;
    }
  }

  @include media-query(768) {
    padding: rem.rem_calc(8 40);
  }

  &:focus,
  &:focus:hover {
    @include focusElement();
  }

  &:disabled {
    cursor: not-allowed;
  }

  @if $appearance == primary {
    background-color: RGBA(var(--color-mariner-700));
    color: RGBA(var(--color-white-primary));

    bmb-icon {
      color: RGBA(var(--color-white-primary));
    }

    &:hover:not(:disabled),
    &:focus-visible:not(:disabled) {
      background-color: RGBA(var(--color-mariner-800));
    }

    &:active:not(:disabled) {
      background-color: RGBA(var(--color-mariner-500));
    }

    &:disabled {
      background-color: RGBA(var(--color-charade-300));
      color: RGBA(var(--color-white-min));
    }
  } @else if $appearance == secondary-filled {
    background-color: RGBA(var(--color-charade-50));
    color: RGBA(var(--color-charade-900));

    bmb-icon {
      color: RGBA(var(--color-charade-900));
    }

    &:hover:not(:disabled),
    &:focus-visible:not(:disabled) {
      background-color: RGBA(var(--color-charade-100));
    }

    &:active:not(:disabled) {
      background-color: RGBA(var(--color-charade-500));
      color: RGBA(var(--color-charade-50));

      bmb-icon {
        color: RGBA(var(--color-charade-50));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  } @else if $appearance == secondary-outlined {
    background-color: transparent;
    border: rem.rem_calc(1) solid RGBA(var(--color-black-primary));
    color: RGBA(var(--color-black-primary));

    bmb-icon {
      color: RGBA(var(--color-black-primary));
    }

    &:hover:not(:disabled),
    &:focus-visible:not(:disabled) {
      border-width: rem.rem_calc(2);
    }

    &:active:not(:disabled) {
      background-color: RGBA(var(--color-black-primary));
      color: RGBA(var(--color-white-primary));

      bmb-icon {
        color: RGBA(var(--color-white-primary));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  } @else if $appearance == destructive {
    background-color: transparent;
    border: rem.rem_calc(1) solid RGBA(var(--color-red-primary));
    color: RGBA(var(--color-red-primary));

    bmb-icon {
      color: RGBA(var(--color-red-primary));
    }

    &:hover:not(:disabled),
    &:focus-visible:not(:disabled) {
      border-width: rem.rem_calc(2);
    }

    &:active:not(:disabled) {
      background-color: RGBA(var(--color-red-primary));
      color: RGBA(var(--color-white-primary));

      bmb-icon {
        color: RGBA(var(--color-white-primary));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  }
}

// Input styles
@mixin input($type: main) {
  @include resetElement();
  @include fonts.font(4, regular);
  appearance: none;
  width: 100%;
  height: rem.rem_calc(48);

  &:focus,
  &:focus:hover,
  &:disabled:focus {
    @include focusElement();
  }

  @if $type == main {
    background-color: RGBA(var(--color-white-primary));
    border: rem.rem_calc(1) solid RGBA(var(--color-charade-500));
    border-radius: rem.rem_calc(8);
    color: RGBA(var(--color-black-primary));
    padding: rem.rem_calc(8);

    &:hover {
      border-color: RGBA(var(--color-charade-500));
    }

    &:focus {
      border: rem.rem_calc(2) solid RGBA(var(--color-blue-primary));
    }

    &::placeholder {
      color: RGBA(var(--color-charade-300));
    }

    &.ng-invalid {
      border-color: RGBA(var(--color-red-primary));
    }
  } @else if $type == simple {
    background-color: transparent;
    border: 0;
    border-bottom: rem.rem_calc(1) solid RGBA(var(--color-charade-950));
    color: RGBA(var(--color-black));

    &:focus {
      border-bottom: rem.rem_calc(2) solid RGBA(var(--color-blue-primary));
      border-color: RGBA(var(--color-blue-primary));
      outline: none;
    }

    &::placeholder {
      color: RGBA(var(--color-charade-300));
    }

    &.ng-invalid {
      border-color: RGBA(var(--color-red-primary));
    }
  } @else if $type == normal {
    background-color: RGBA(var(--color-charade-950));
    border: rem.rem_calc(1) solid RGBA(var(--color-charade-950));
    border-radius: rem.rem_calc(8);
    color: RGBA(var(--color-white-primary));
    padding: rem.rem_calc(8);

    &:focus {
      border: rem.rem_calc(2) solid RGBA(var(--color-white-primary));
      outline: none;
    }

    &::placeholder {
      color: RGBA(var(--color-charade-300));
    }

    &.ng-invalid {
      border-color: RGBA(var(--color-red-primary));
    }
  }
}

@mixin fabInput($device: d, $size: s, $type: e) {
  font-family: fonts.$font-poppins-regular;
  display: inline-flex;
  font-size: rem.rem_calc(14);
  align-items: center;
  justify-content: center;
  outline: none;
  border: 0;
  margin: rem.rem_calc(3);
  padding: rem.rem_calc(8 16);
  position: fixed;
  bottom: rem.rem_calc(40);
  right: rem.rem_calc(40);
  box-shadow: rem.rem_calc(2 2 2 1) RGBA(var(--color-black-primary), 0.25);
  -webkit-box-shadow: rem.rem_calc(2 2 2 1)
    RGBA(var(--color-black-primary), 0.25);
  -moz-box-shadow: rem.rem_calc(2 2 2 1) RGBA(var(--color-black-primary), 0.25);

  @if $device == m {
    background-color: RGBA(var(--color-neon-primary));
    color: RGBA(var(--color-white-primary));

    &:hover {
      background-color: RGBA(var(--color-charade-500));
    }

    &:active {
      background-color: RGBA(var(--color-charade-500));
      border: rem.rem_calc(1) solid RGBA(var(--color-neon-primary));

      > span {
        color: RGBA(var(--color-neon-primary));
      }

      > i {
        color: RGBA(var(--color-neon-primary));
      }
    }
  } @else if $device == d {
    background-color: RGBA(var(--color-blue-primary));
    color: RGBA(var(--color-white-primary));

    &:hover {
      background-color: RGBA(var(--color-mariner-800));
    }

    &:active {
      background-color: RGBA(var(--color-white-primary));
      border: rem.rem_calc(1) solid RGBA(var(--color-blue-primary));

      > span {
        color: RGBA(var(--color-blue-primary));
      }

      > i {
        color: RGBA(var(--color-blue-primary));
      }
    }
  }

  > bmb-icon {
    font-size: rem.rem_calc(24);
  }

  @if $size == s and $type == n {
    width: rem.rem_calc(40);
    height: rem.rem_calc(40);
    border-radius: rem.rem_calc(50);
  } @else if $size == s and $type == e {
    width: fit-content;
    height: rem.rem_calc(40);
    border-radius: rem.rem_calc(50);
    > span {
      padding-right: rem.rem_calc(8);
      font-size: rem.rem_calc(14);
    }
  } @else if $size == l and $type == n {
    width: rem.rem_calc(60);
    height: rem.rem_calc(60);
    border-radius: rem.rem_calc(50);
  } @else if $size == l and $type == e {
    height: rem.rem_calc(60);
    width: fit-content;
    border-radius: rem.rem_calc(50);
    > span {
      padding-right: rem.rem_calc(8);
      font-size: rem.rem_calc(14);
    }
  }
}
