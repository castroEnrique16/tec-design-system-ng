@import "./fonts";
@import "./measures";
@import "./rem";

// Reset Element
@mixin resetElement() {
  line-height: 1.5;
  box-sizing: border-box;

  &:focus {
    @include focusElement();
  }
}

@mixin focusElement($inset: outset) {
  outline: 0;
}

@mixin button($type: primary) {
  @include font(5, regular);
  align-items: center;
  border: none;
  border-radius: $border-radius-sm;
  display: flex;
  height: rem_calc(36);
  justify-content: center;
  padding: $spacing-size-md $spacing-size-base;

  bmb-icon {
    font-size: rem_calc(16);
    height: rem_calc(16);
  }

  &[size="large"] {
    height: rem_calc(48);
    width: 100%;
  }

  &[case="true"] {
    display: grid;
    grid-template-columns: auto 1fr;
    align-items: center;
    padding-top: 0;
    padding-bottom: 0;

    &[icon-position="right"],
    &[ng-reflect-icon-position="right"] {
      grid-template-columns: 1fr auto;
    }
  }

  @include media-query(768) {
    padding: $spacing-size-md $spacing-size-xxl;
  }

  &:focus,
  &:focus:hover {
    @include focusElement();
  }

  &:disabled {
    cursor: not-allowed;
  }

  @if $type == primary {
    background-color: RGBA(var(--color-mariner-700));
    color: RGBA(var(--color-white-primary));

    bmb-icon {
      color: RGBA(var(--color-white-primary));
    }

    &:hover,
    &:focus-visible {
      background-color: RGBA(var(--color-mariner-800));
    }

    &:active {
      background-color: RGBA(var(--color-mariner-500));
    }

    &:disabled {
      background-color: RGBA(var(--color-charade-300));
      color: RGBA(var(--color-white-tint));
    }
  } @else if $type == alternative {
    background-color: RGBA(var(--color-charade-50));
    color: RGBA(var(--color-charade-900));

    bmb-icon {
      color: RGBA(var(--color-charade-900));
    }

    &:hover,
    &:focus-visible {
      background-color: RGBA(var(--color-charade-100));
    }

    &:active {
      background-color: RGBA(var(--color-charade-500));
      color: RGBA(var(--color-charade-50));

      bmb-icon {
        color: RGBA(var(--color-charade-50));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  } @else if $type == secondary {
    background-color: transparent;
    border: rem_calc(1) solid RGBA(var(--color-black-primary));
    color: RGBA(var(--color-black-primary));

    bmb-icon {
      color: RGBA(var(--color-black-primary));
    }

    &:hover,
    &:focus-visible {
      border-width: rem_calc(2);
    }

    &:active {
      background-color: RGBA(var(--color-black-primary));
      color: RGBA(var(--color-white-primary));

      bmb-icon {
        color: RGBA(var(--color-white-primary));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  } @else if $type == destructive {
    background-color: transparent;
    border: rem_calc(1) solid RGBA(var(--color-red-primary));
    color: RGBA(var(--color-red-primary));

    bmb-icon {
      color: RGBA(var(--color-red-primary));
    }

    &:hover,
    &:focus-visible {
      border-width: rem_calc(2);
    }

    &:active {
      background-color: RGBA(var(--color-red-primary));
      color: RGBA(var(--color-white-primary));

      bmb-icon {
        color: RGBA(var(--color-white-primary));
      }
    }

    &:disabled {
      opacity: 0.5;
    }
  }
}

@mixin inputType($type: main) {
  @include resetElement();
  @include font(4, regular);
  appearance: none;
  width: 100%;
  height: 100%;

  &:focus,
  &:focus:hover {
    @include focusElement();
  }

  @if $type == main{
    background-color: RGBA(var(--color-charade-100));
    border-radius: $spacing-size-sm;
    border: rem_calc(1) solid RGBA(var(--color-charade-100));

    &:focus{
      outline: none;
      border: rem_calc(2) solid RGBA(var(--color-blue-primary));
      border-color: RGBA(var(--color-blue-primary)) ;
    }

    &::placeholder{
        color: RGBA(var(--color-charade-300));
    }

    &:disabled:focus {
        outline: none;
    }

    &.ng-invalid {
      border-color: RGBA(var(--color-red-primary));
    }
  } @else if $type == simple{
    border: 0;
    border-bottom: rem_calc(1) solid RGBA(var(--color-charade-950));
    background-color: transparent;
    color: RGBA(var(--color-black));

    &:focus{
        outline: none;
        border-bottom: rem_calc(2) solid RGBA(var(--color-blue-primary));
        border-color: RGBA(var(--color-blue-primary)) ;
    }

    &::placeholder{
        color: RGBA(var(--color-charade-300));
    }

    &:disabled:focus {
        outline: none;
    }

    &.ng-invalid {
      border-color: RGBA(var(--color-red-primary));
    }
  } @else if $type == normal{
    background-color: RGBA(var(--color-charade-950));
    border-radius: $spacing-size-sm;
    border: rem_calc(1) solid RGBA(var(--color-charade-950));
    color: RGBA(var(--color-white));

    &:focus{
        outline: none;
        border-color: rem_calc(2) solid RGBA(var(--color-white)) ;
    }

    &::placeholder{
        color: RGBA(var(--color-charade-300));
    }

    &:disabled:focus {
        outline: none;
    }

    &.ng-invalid {
      border-color: RGBA(var(--color-red-primary));
    }
  }
}

@mixin badge($type: light) {
  @include font(2, semibold);
  align-items: center;
  border-radius: $border-radius-xs;
  color: RGBA(var(--color-white-primary));
  display: flex;
  justify-content: center;
  min-height: rem_calc(24);
  padding: $spacing-size-sm $spacing-size-base;
  width: fit-content;

  @if $type == normal {
    background-color: RGBA(var(--color-charade-500));
  } @else if $type == strong {
    background-color: RGBA(var(--color-mariner-700));
  } @else if $type == success {
    background-color: RGBA(var(--color-green-light));
    color: RGBA(var(--color-charade-950));
  } @else if $type == info {
    background-color: RGBA(var(--color-purple-primary));
  } @else if $type == warning {
    background-color: RGBA(var(--color-yellow-tint));
    color: RGBA(var(--color-charade-950));
  } @else if $type == error {
    background-color: RGBA(var(--color-red-light));
    color: RGBA(var(--color-charade-950));
  } @else if $type == brand {
    background-color: RGBA(var(--color-charade-950));
  }
}

@mixin media-query($breakpoint) {
  $breakpoint-value: if(
    type-of($breakpoint) == number,
    $breakpoint,
    str-slice($breakpoint, 1, -2)
  );
  @media only screen and (min-width: #{$breakpoint-value}px) {
    @content;
  }
}
@mixin inputPad($type: s){
  padding: rem_calc(8);

  @if $type == l {
    padding: rem_calc(8) rem_calc(8) rem_calc(8) rem_calc(35) ;
  }
}

@mixin helperColor($type: light){}
