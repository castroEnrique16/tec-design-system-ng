{
    "pipes": [],
    "interfaces": [
        {
            "name": "Props",
            "id": "interface-Props-6f84f63bd2a266dbb2b1de406bf8da808e6d45f9839f2b8776492be1780a7c12c1f8a11b5c276bca905aa77398248616d6f4054eb7ccccfb514fb4695f9fdab5",
            "file": "projects/ds-ng/src/lib/components/bmb-dot-paginator/bmb-dot-paginator.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\n\nexport interface Target {\n  target: string;\n  index: number;\n}\n\nexport interface Props {\n  activeDotIndex?: number;\n  totalDots?: number;\n  targets?: Target[];\n  onDotPress: EventEmitter<number>;\n}\n",
            "properties": [
                {
                    "name": "activeDotIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "onDotPress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<number>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "targets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Target[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalDots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Target",
            "id": "interface-Target-6f84f63bd2a266dbb2b1de406bf8da808e6d45f9839f2b8776492be1780a7c12c1f8a11b5c276bca905aa77398248616d6f4054eb7ccccfb514fb4695f9fdab5",
            "file": "projects/ds-ng/src/lib/components/bmb-dot-paginator/bmb-dot-paginator.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\n\nexport interface Target {\n  target: string;\n  index: number;\n}\n\nexport interface Props {\n  activeDotIndex?: number;\n  totalDots?: number;\n  targets?: Target[];\n  onDotPress: EventEmitter<number>;\n}\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DsNgService",
            "id": "injectable-DsNgService-a4e7e1153577747318496dc973e5de64d9122fdffb0eb8740507db1480422c503d40c362c2c4650412df24ac2ed2b159476612100db28bd1222acebdf3791f18",
            "file": "projects/ds-ng/src/lib/ds-ng.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DsNgService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-205f0af65a1152b4fa883c5e9b04ef9668652d50d15d6a8263b40ee49b87ba2b8985fbe3a2ad3879798e5eea82c90c5cb2bc98d1f10bbafbf960f4e6f77d0da6",
            "file": "projects/ds-ng/src/lib/services/theme.service.ts",
            "properties": [
                {
                    "name": "theme$",
                    "defaultValue": "this.themeSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "themeSubject",
                    "defaultValue": "new BehaviorSubject<string>('light')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private themeSubject = new BehaviorSubject<string>('light');\n  theme$ = this.themeSubject.asObservable();\n\n  setTheme(theme: string): void {\n    this.themeSubject.next(theme);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "BmbButtonDirective",
            "id": "directive-BmbButtonDirective-071203a5e8eac897aebaaa00a535a3efa7814f7c47ef72587b2135189576066a6d14e74d2fdad59b24ac5cd801a9d779bb7fb2290774dcc716e0805917d74fc0",
            "file": "projects/ds-ng/src/lib/directives/button.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  ElementRef,\n  HostBinding,\n  ViewContainerRef,\n  ChangeDetectorRef,\n  OnInit,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport { BmbIconComponent } from '../components/bmb-icon/bmb-icon.component';\n\n@Directive({\n  selector: '[bmbButton]',\n})\nexport class BmbButtonDirective implements OnInit, OnChanges {\n  @Input() icon: string = '';\n  @Input() iconPosition: 'left' | 'right' = 'left';\n  @Input() iconCase: boolean = false;\n  @Input() appearance: 'primary' | 'alternative' | 'secondary' | 'destructive' =\n    'primary';\n  @Input() size: 'small' | 'large' = 'small';\n\n  private providedInputs: Set<string> = new Set();\n\n  constructor(\n    private el: ElementRef,\n    private viewContainerRef: ViewContainerRef,\n    private cdr: ChangeDetectorRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit(): void {\n    this.addIcon();\n    this.applyAttributes();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    Object.keys(changes).forEach((input) => {\n      this.providedInputs.add(input);\n    });\n\n    this.applyAttributes();\n    this.addIcon();\n    this.cdr.markForCheck();\n  }\n\n  private applyAttributes() {\n    if (this.providedInputs.has('iconCase')) {\n      if (this.iconCase) {\n        this.renderer.setAttribute(this.el.nativeElement, 'case', 'true');\n      } else {\n        this.renderer.removeAttribute(this.el.nativeElement, 'case');\n      }\n    }\n\n    if (this.providedInputs.has('size') && this.size) {\n      this.renderer.setAttribute(this.el.nativeElement, 'size', this.size);\n    }\n\n    if (this.providedInputs.has('iconPosition')) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'icon-position',\n        this.iconPosition\n      );\n    }\n  }\n\n  @HostBinding('class') get elementClass(): string {\n    return `btn--${this.appearance}`;\n  }\n\n  private addIcon() {\n    this.viewContainerRef.clear();\n\n    if (this.icon) {\n      const iconComponentRef =\n        this.viewContainerRef.createComponent(BmbIconComponent);\n      const iconComponent = iconComponentRef.instance;\n      iconComponent.icon = this.icon;\n\n      if (this.iconPosition === 'right') {\n        this.el.nativeElement.appendChild(\n          iconComponentRef.location.nativeElement\n        );\n      } else {\n        this.el.nativeElement.insertBefore(\n          iconComponentRef.location.nativeElement,\n          this.el.nativeElement.firstChild\n        );\n      }\n    }\n  }\n}\n",
            "selector": "[bmbButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "appearance",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"primary\" | \"alternative\" | \"secondary\" | \"destructive\"",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconCase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"left\" | \"right\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"small\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "providedInputs",
                    "defaultValue": "new Set()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<string>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "applyAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "elementClass": {
                    "name": "elementClass",
                    "getSignature": {
                        "name": "elementClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 72
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "BmbAlertComponent",
            "id": "component-BmbAlertComponent-ece7876e111851522c307108910b4d26b7a08eda420507976f268a89c9a4ada8ad45d110edab06789558656b22aa03ea6185edfadd068f2150ec25391671f3ae",
            "file": "projects/ds-ng/src/lib/components/bmb-alert/bmb-alert.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-alert",
            "styleUrls": [
                "../../../assets/styles/components/_alert.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'bmb-alert',\n  templateUrl: './bmb-alert.component.html',\n  styleUrls: ['../../../assets/styles/components/_alert.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbAlertComponent {\n  @Input() type: string = '';\n  @Input() text: string = '';\n\n  constructor() {}\n\n  getClasses(): string[] {\n    const classes: string[] = ['alert'];\n\n    if (this.type) {\n      classes.push('alert--' + this.type);\n    }\n\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../base/mixins\";\n\n.alert {\n  &--neutral {\n    @include alert(neutral);\n  }\n\n  &--primary {\n    @include alert(primary);\n  }\n\n  &--successful {\n    @include alert(successful);\n  }\n\n  &--warning {\n    @include alert(warning);\n  }\n\n  &--error {\n    @include alert(error);\n  }\n\n  &--event {\n    @include alert(event);\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_alert.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "extends": [],
            "templateData": "<div [ngClass]=\"getClasses()\">\n  <bmb-icon icon=\"info\" />\n  <span>{{ text }}</span>\n</div>\n"
        },
        {
            "name": "BmbBadgeComponent",
            "id": "component-BmbBadgeComponent-3a913d419954f39c1ff790705b2041de4425619e0c21f15785f907558945d5c08c087f45640aff1c30ab9075d6e673782ce6d519871eacca07abd7e9b64b19f7",
            "file": "projects/ds-ng/src/lib/components/bmb-badge/bmb-badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-badge",
            "styleUrls": [
                "../../../assets/styles/components/_badge.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-badge.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "grouped",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Renderer2,\n  AfterViewInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'bmb-badge',\n  templateUrl: './bmb-badge.component.html',\n  styleUrls: ['../../../assets/styles/components/_badge.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbBadgeComponent implements AfterViewInit {\n  @Input() type: string = '';\n  @Input() text: string = '';\n  @Input() grouped: boolean = false;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterViewInit() {\n    if (this.grouped) {\n      const parentElement = this.el.nativeElement.parentElement;\n\n      let wrapperDiv = parentElement.querySelector('.badge--grouped');\n      if (!wrapperDiv) {\n        wrapperDiv = this.renderer.createElement('div');\n        this.renderer.addClass(wrapperDiv, 'badge-grouped');\n        this.renderer.insertBefore(parentElement, wrapperDiv, null);\n      }\n\n      this.renderer.appendChild(wrapperDiv, this.el.nativeElement);\n    }\n  }\n\n  getClasses(): string[] {\n    const classes: string[] = ['badge'];\n\n    if (this.type) {\n      classes.push('badge--' + this.type);\n    }\n\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../base/mixins\";\n@import \"../base/measures\";\n\n.badge {\n  &--grouped {\n    display: flex;\n    flex-flow: row wrap;\n    gap: $spacing-size-base;\n\n    @include media-query(768) {\n      gap: $spacing-size-md;\n    }\n  }\n\n  &--normal {\n    @include badge(normal);\n  }\n\n  &--strong {\n    @include badge(strong);\n  }\n\n  &--success {\n    @include badge(success);\n  }\n\n  &--info {\n    @include badge(info);\n  }\n\n  &--warning {\n    @include badge(warning);\n  }\n\n  &--error {\n    @include badge(error);\n  }\n\n  &--brand {\n    @include badge(brand);\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_badge.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div [ngClass]=\"getClasses()\">\n  <span>{{ text }}</span>\n</div>\n"
        },
        {
            "name": "BmbContainerComponent",
            "id": "component-BmbContainerComponent-f099e45d328fc0e9318ae95b543d72c0a96a0d2a9322fede943a7428c913313434243173492a7580113feb02286e694acf813cb75f9acfc1cfc7395442d7d32e",
            "file": "projects/ds-ng/src/lib/components/bmb-container/bmb-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-container",
            "styleUrls": [
                "../../../assets/styles/components/_container.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'bmb-container',\n  templateUrl: './bmb-container.component.html',\n  styleUrls: ['../../../assets/styles/components/_container.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbContainerComponent {\n  @Input() type: string = '';\n\n  constructor() {}\n\n  getClasses(): string[] {\n    const classes: string[] = ['container'];\n\n    if (this.type) {\n      classes.push('container--' + this.type);\n    }\n\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../tokens/colors\";\n@import \"../base/rem\";\n@import \"../base/measures\";\n\n.container {\n  align-items: flex-start;\n  background-color: RGBA(var(--color-charade-900));\n  display: flex;\n\n  //Header and calendar\n  &--primary {\n    align-items: center;\n    border-radius: 0 0 $border-radius-md $border-radius-md;\n    justify-content: space-between;\n    margin: 0 0 $spacing-size-base;\n    padding: $spacing-size-base;\n  }\n\n  //Modal\n  &--secondary {\n    background-color: RGBA(var(--color-charade-950));\n    border: rem_calc(1) solid RGBA(var(--color-charade-700));\n    border-radius: $border-radius-sm;\n    flex-direction: column;\n    justify-content: center;\n    margin: $spacing-size-base;\n    padding: $spacing-size-base;\n  }\n\n  &--button {\n    border: rem_calc(2) solid RGBA(var(--color-charade-700));\n    border-radius: $border-radius-sm;\n    justify-content: space-between;\n    margin: $spacing-size-base;\n    padding: $spacing-size-lg;\n  }\n\n  //Home\n  &--section {\n    flex-direction: column;\n    justify-content: space-between;\n    margin: $spacing-size-base 0;\n    padding: $spacing-size-lg $spacing-size-base;\n  }\n\n  &--contrast {\n    align-items: center;\n    background-color: var(--color-black-tint);\n    border: rem_calc(1) solid var(--color-black-min);\n    border-radius: $border-radius-lg;\n    flex-direction: column;\n    justify-content: center;\n    margin: $spacing-size-base;\n    padding: rem-calc(48);\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_container.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "extends": [],
            "templateData": "<div [ngClass]=\"getClasses()\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "BmbDividerComponent",
            "id": "component-BmbDividerComponent-ac88e134d53190d56c906807adb789c77218d1717fa6324e51911e5fffad7035f39ce5ae6190b30f7d7c31fa00b459d77b707499dae3e62f86c66902cfa129b3",
            "file": "projects/ds-ng/src/lib/components/bmb-divider/bmb-divider.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-divider",
            "styleUrls": [
                "../../../assets/styles/components/_divider.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-divider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "styles",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'bmb-divider',\n  templateUrl: './bmb-divider.component.html',\n  styleUrls: ['../../../assets/styles/components/_divider.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbDividerComponent {\n  @Input() size: string = '';\n  @Input() styles: string = '';\n  @Input() type: string = '';\n\n  constructor() {}\n\n  getClasses(): string[] {\n    const classes: string[] = ['divider'];\n\n    if (this.type) {\n      classes.push('divider-' + this.type);\n    }\n\n    if (this.size) {\n      classes.push('divider-' + this.size);\n    }\n\n    if (this.styles) {\n      classes.push('divider-' + this.styles);\n    }\n\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../tokens/colors\";\n@import \"../base/rem\";\n@import \"../base/measures\";\n\n.divider {\n  border: rem_calc(1) solid RGBA(var(--color-charade-50));\n  margin: $spacing-size-base 0;\n  width: 100%;\n\n  &-2 {\n    border-width: rem_calc(2);\n  }\n\n  &-3 {\n    border-width: rem_calc(3);\n  }\n\n  &-4 {\n    border-width: rem_calc(4);\n  }\n\n  &-5 {\n    border-width: rem_calc(5);\n  }\n\n  &-white {\n    border-color: RGBA(var(--color-white-primary));\n  }\n\n  &-primary {\n    border-color: RGBA(var(--color-mariner-500));\n  }\n\n  &-light {\n    border-color: RGBA(var(--color-charade-200));\n  }\n\n  &-secondary {\n    border-color: RGBA(var(--color-charade-300));\n  }\n\n  &-success {\n    border-color: RGBA(var(--color-green-tint));\n  }\n\n  &-info {\n    border-color: RGBA(var(--color-purple-primary));\n  }\n\n  &-warning {\n    border-color: RGBA(var(--color-yellow-primary));\n  }\n\n  &-danger {\n    border-color: RGBA(var(--color-red-primary));\n  }\n\n  &-dark {\n    border-color: RGBA(var(--color-charade-950));\n  }\n\n  &-dotted {\n    border-style: dotted;\n  }\n\n  &-dashed {\n    border-style: dashed;\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_divider.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [],
            "templateData": "<div class=\"divider\" [ngClass]=\"getClasses()\"></div>\n"
        },
        {
            "name": "BmbDotPaginatorComponent",
            "id": "component-BmbDotPaginatorComponent-6a745a2a485b7474dd77452586e1398e14f7a5a4e76924effccc7ab401b561214dff94cd636c6126fd105b7deabe669a6c034191b3b17e6e9be38f43c3c86cbd",
            "file": "projects/ds-ng/src/lib/components/bmb-dot-paginator/bmb-dot-paginator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-dot-paginator",
            "styleUrls": [
                "../../../assets/styles/components/_dotPaginator.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-dot-paginator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "activeDotIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "targets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Target[]",
                    "decorators": []
                },
                {
                    "name": "totalDots",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDotPress",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getDotsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDotClicked",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Props, Target } from './bmb-dot-paginator.interface';\n\n@Component({\n  selector: 'bmb-dot-paginator',\n  templateUrl: './bmb-dot-paginator.component.html',\n  styleUrls: ['../../../assets/styles/components/_dotPaginator.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbDotPaginatorComponent {\n  @Input() activeDotIndex?: number = 0;\n  @Input() totalDots?: number = 0;\n  @Input() targets: Target[] = [];\n  @Output() onDotPress: EventEmitter<number> = new EventEmitter<number>();\n\n  getDotsArray(): number[] {\n    return new Array(this.totalDots || 0).fill(0).map((_, i) => i);\n  }\n\n  onDotClicked(index: number): void {\n    this.activeDotIndex = index;\n    this.onDotPress.emit(index);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../tokens/colors\";\n@import \"../base/rem\";\n\n.dot-paginator {\n  align-items: center;\n  background-color: RGBA(var(--color-charade-200));\n  border-radius: rem_calc(40);\n  display: flex;\n  justify-content: center;\n  list-style-type: none;\n  margin: 0;\n  overflow: hidden;\n  padding: rem_calc(12);\n  position: relative;\n  width: fit-content;\n\n  .dot {\n    background-color: RGBA(var(--color-white-primary));\n    border-radius: 100%;\n    cursor: pointer;\n    height: rem_calc(6);\n    margin: 0 rem_calc(8);\n    position: relative;\n    width: rem_calc(6);\n\n    &.active {\n      background-color: RGBA(var(--color-mariner-500));\n      border-radius: rem_calc(30);\n      width: rem_calc(16);\n    }\n\n    ::marker {\n      display: none;\n    }\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_dotPaginator.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ol class=\"dot-paginator\">\n  <li\n    *ngFor=\"let i of getDotsArray()\"\n    [attr.data-bs-target]=\"targets[i]?.target || ''\"\n    [attr.data-bs-slide-to]=\"i\"\n    [ngClass]=\"{ dot: true, active: activeDotIndex === i }\"\n    (click)=\"onDotClicked(i)\"\n  ></li>\n</ol>\n"
        },
        {
            "name": "BmbHeaderMobileComponent",
            "id": "component-BmbHeaderMobileComponent-1a1d40a19df0894479641265f3d6ed675ee09c9eb8b5b89d0a564eff9f4ca372e05a7442d66d8a42d5c4cd585816b3a721cf2b25b869bebfd23b32b8ac6fa139",
            "file": "projects/ds-ng/src/lib/components/bmb-header-mobile/bmb-header-mobile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-header-mobile",
            "styleUrls": [
                "../../../assets/styles/components/_header.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-header-mobile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "altImage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "altLogo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconLeft",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconRight",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconRight2",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconRight3",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isTwoIcons",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'bmb-header-mobile',\n  templateUrl: './bmb-header-mobile.component.html',\n  styleUrls: ['../../../assets/styles/components/_header.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbHeaderMobileComponent {\n  @Input() text: string = '';\n  @Input() type: string = '';\n  @Input() image: string = '';\n  @Input() altImage: string = '';\n  @Input() logo: string = '';\n  @Input() altLogo: string = '';\n  @Input() iconLeft: string = '';\n  @Input() iconRight: string = '';\n  @Input() iconRight2: string = '';\n  @Input() iconRight3: string = '';\n  @Input() isTwoIcons: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../tokens/colors\";\n@import \"../base/rem\";\n@import \"../base/measures\";\n@import \"../base/fonts\";\n\n.header {\n  &__mobile {\n    color: RGBA(var(--color-white-primary));\n\n    &--text {\n      @include font(6, regular);\n    }\n\n    &--left,\n    &--right {\n      align-items: center;\n      display: flex;\n      font-size: rem_calc(24);\n      gap: $spacing-size-sm;\n    }\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_header.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"header__mobile\">\n  <bmb-container type=\"primary\">\n    <div class=\"header__mobile--left\">\n      <bmb-logo size=\"small\" [image]=\"logo\" [altImage]=\"altLogo\" *ngIf=\"logo\" />\n      <bmb-icon [icon]=\"iconLeft\" *ngIf=\"iconLeft\" />\n    </div>\n    <span class=\"header__mobile--text\">{{ text }}</span>\n    <div class=\"header__mobile--right\">\n      <bmb-icon [icon]=\"iconRight\" *ngIf=\"iconRight\" />\n      <bmb-icon [icon]=\"iconRight2\" *ngIf=\"iconRight2\" />\n      <bmb-user-image\n        size=\"mobile-small\"\n        [image]=\"image\"\n        [altImage]=\"altImage\"\n        *ngIf=\"image\"\n      />\n    </div>\n  </bmb-container>\n</div>\n"
        },
        {
            "name": "BmbIconComponent",
            "id": "component-BmbIconComponent-d91ee1bfa6cdd4c102ac98287bdf0c42070f1e6f69b9c2de061db6b0cd39191f9f9210959ecf1f5abe985f8d6ce62eecb5af13c28415ffab5591c6fb19f4b8c9",
            "file": "projects/ds-ng/src/lib/components/bmb-icon/bmb-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./bmb-icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "'face'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'bmb-icon',\n  templateUrl: './bmb-icon.component.html',\n})\nexport class BmbIconComponent {\n  @Input() icon: string = 'face';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<i class=\"material-icons\">{{ icon }}</i>\n"
        },
        {
            "name": "BmbIconTextInputComponent",
            "id": "component-BmbIconTextInputComponent-39b3c8b0b8ddda050b0ab032715a4c170ad2a7752dd1aed9661e7e631e2ba2182ab26aa47b35c6ab6b8337690af209279407a77b0eeba906efe26976b660c50c",
            "file": "projects/ds-ng/src/lib/components/bmb-icon-text-input/bmb-icon-text-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[bmb-icon-text-input]",
            "styleUrls": [
                "../../../assets/styles/components/_icon-text-input.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-icon-text-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.ng-invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, HostBinding, Optional, Input, ViewEncapsulation, OnInit } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n@Component({\n  selector: '[bmb-icon-text-input]',\n  templateUrl: './bmb-icon-text-input.component.html',\n  styleUrls: ['../../../assets/styles/components/_icon-text-input.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Emulated,\n})\nexport class BmbIconTextInputComponent {\n  // @Input() text: string = '';\n  // @Input() icon: string = '';\n  // @Input() image: string = '';\n\n  @HostBinding('class.ng-invalid')\n  get invalid(): boolean {\n    return this._ngControl?.invalid ?? false;\n  }\n\n  constructor(@Optional() private readonly _ngControl?: NgControl){\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../base/mixins\";\n\nbmb-input-wrapper {\n  align-items: center;\n  display: flex;\n  position: relative;\n\n  > .bmb-input-simple {\n    @include inputType(simple);\n    @include inputPad(l);\n  }\n\n  .bmb-input-simple ~ .bmb-icon {\n    color: RGBA(var(--color-marine-100));\n  }\n\n  > .bmb-input-normal {\n    @include inputType(normal);\n    @include inputPad(l);\n  }\n\n  .bmb-input-normal ~ .bmb-icon {\n    color: RGBA(var(--color-white));\n  }\n\n  > .bmb-input-main {\n    @include inputType(main);\n    @include inputPad(l);\n  }\n\n  .bmb-input-main ~ .bmb-icon {\n    color: RGBA(var(--color-marine-100));\n  }\n\n  .bmb-icon {\n    font-size: rem_calc(24) !important;\n    left: rem_calc(8);\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n}\n\nbmb-input-form {\n  display: flex;\n  flex-direction: column;\n  padding: rem_calc(2);\n\n  > .bmb-label {\n    @include font(3, regular);\n    color: RGBA(var(--color-charade-900));\n    padding: rem_calc(8) rem_calc(8) rem_calc(4) rem_calc(8);\n  }\n\n  > .bmb-helper {\n    @include font(3, regular);\n    color: RGBA(var(--color-charade-300));\n    padding: rem_calc(4) rem_calc(8) rem_calc(8) rem_calc(8);\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_icon-text-input.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "invalid": {
                    "name": "invalid",
                    "getSignature": {
                        "name": "invalid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 17
                    }
                }
            },
            "templateData": ""
        },
        {
            "name": "BmbInputComponent",
            "id": "component-BmbInputComponent-7ce2d77eb4e52a4c28d36a653f96547e3776d6e97235ab2825cd8778081a1a525e0a41ac3fb8902eb48aed6ab071e17a31e68d1f95807e00db3fc3be305fecc9",
            "file": "projects/ds-ng/src/lib/components/bmb-input/bmb-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => BmbInputComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => BmbInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "bmb-input",
            "styleUrls": [
                "../../../assets/styles/components/_input.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isClearable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isValid",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "handleBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "handleChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "handleClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "handleFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "handleMouseover",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl | undefined",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "inputModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "inputWrapper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputWrapper', {read: ElementRef, static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function | undefined",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "getComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onParentClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValidation",
                    "args": [
                        {
                            "name": "validation",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "validation",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ invalid: boolean; }",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  Output,\n  EventEmitter,\n  forwardRef,\n  AfterViewInit,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectorRef,\n} from '@angular/core';\n\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  FormControl,\n  NgModel,\n} from '@angular/forms';\n\n@Component({\n  selector: 'bmb-input',\n  templateUrl: './bmb-input.component.html',\n  styleUrls: ['../../../assets/styles/components/_input.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => BmbInputComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => BmbInputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class BmbInputComponent\n  implements ControlValueAccessor, AfterViewInit, OnChanges\n{\n  @ViewChild('inputWrapper', { read: ElementRef, static: false })\n  inputWrapper: ElementRef | undefined;\n  @ViewChild('input', { static: false })\n  input: NgModel | undefined;\n\n  @Input() label: string = '';\n  @Input() placeholder: string = '';\n  @Input() icon: string = '';\n  @Input() errorMessage: string = '';\n  @Input() isValid: boolean = true;\n  @Input() isDisabled: boolean = false;\n  @Input() isRequired: boolean = false;\n  @Input() value: string | undefined;\n  @Input() isClearable: boolean = false;\n\n  @Output() handleClick: EventEmitter<any> = new EventEmitter();\n  @Output() handleFocus: EventEmitter<any> = new EventEmitter();\n  @Output() handleBlur: EventEmitter<any> = new EventEmitter();\n  @Output() handleMouseover: EventEmitter<any> = new EventEmitter();\n  @Output() handleChange: EventEmitter<any> = new EventEmitter();\n\n  public inputModel: string | undefined;\n  formControl: FormControl | undefined;\n  onTouch: Function | undefined;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    if (this.isDisabled && this.formControl) {\n      this.formControl.disable();\n    }\n    setTimeout(() => {\n      if (this.value && this.inputModel !== undefined) {\n        this.value = undefined;\n      }\n    }, 0);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.formControl && changes?.['isDisabled'] !== undefined) {\n      if (this.formControl.disabled !== changes?.['isDisabled']?.currentValue) {\n        changes?.['isDisabled']?.currentValue\n          ? this.formControl.disable()\n          : this.formControl.enable();\n      }\n    }\n  }\n\n  onClear() {\n    this.inputModel = undefined;\n    this.value = undefined;\n    this.inputWrapper?.nativeElement\n      .querySelector('.bmb__field--input')\n      .focus();\n\n    if (this.isClearable && this.formControl) {\n      this.formControl.reset();\n    }\n\n    this.cdr.detectChanges();\n\n    this.handleChange.emit(this.getValue());\n  }\n\n  getComponent() {\n    return this.input;\n  }\n\n  getValue() {\n    return this.input?.['viewModel'];\n  }\n\n  setValidation(validation: any) {\n    this.isValid = validation;\n  }\n\n  onParentClick() {\n    this.inputWrapper?.nativeElement\n      .querySelector('.bmb__field--input')\n      .focus();\n  }\n\n  onClick() {\n    this.handleChange.emit(this.getValue());\n    this.handleClick.emit(this.getValue());\n  }\n\n  onFocus() {\n    this.handleFocus.emit(this.getValue());\n    if (this.onTouch) {\n      this.onTouch();\n    }\n  }\n\n  onBlur() {\n    this.handleBlur.emit(this.getValue());\n  }\n\n  onMouseover() {\n    this.handleMouseover.emit(this.getValue());\n  }\n\n  onChange(value: any): void {}\n\n  writeValue(value: string): void {\n    this.inputModel = value;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  setDisabledState(state: boolean): void {\n    if (this.formControl) {\n      this.isDisabled = state;\n    }\n  }\n\n  validate(form: FormControl) {\n    this.formControl = form;\n    if (!form?.value && this.isRequired === true) {\n      return { invalid: true };\n    } else {\n      return null;\n    }\n  }\n\n  setValue(value: string) {\n    this.onChange(value);\n    if (this.input?.['viewModel'] === '') {\n      this.inputModel = undefined;\n      this.value = undefined;\n      this.cdr.detectChanges();\n    }\n    this.handleChange.emit(this.getValue());\n    if (this.onTouch) {\n      this.onTouch();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".bmb__field {\n  &--label {\n  }\n\n  &--wrapper {\n    align-items: center;\n    display: flex;\n    justify-content: center;\n    padding: 0;\n    position: relative;\n    width: 100%;\n  }\n\n  &--error {\n  }\n\n  &--icon {\n  }\n\n  &--helper {\n  }\n\n  &--input {\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_input.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"bmb__field\">\n  <label for=\"\" class=\"bmb__field--label\" *ngIf=\"label\">{{ label }}</label>\n  <div\n    class=\"bmb__field--wrapper\"\n    [ngClass]=\"[!isValid ? 'bmb__field--error' : '']\"\n    (click)=\"onParentClick()\"\n    #inputWrapper\n  >\n    <bmb-icon *ngIf=\"icon || !isValid\" [icon]=\"icon\" class=\"bmb__field--icon\" />\n    <input\n      type=\"text\"\n      class=\"bmb__field--input\"\n      (ngModelChange)=\"setValue(input.viewModel)\"\n      (click)=\"onClick()\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n      (mouseover)=\"onMouseover()\"\n      [(ngModel)]=\"value || inputModel\"\n      [required]=\"isRequired\"\n      [disabled]=\"isDisabled\"\n      [placeholder]=\"placeholder ? placeholder : ''\"\n      #input=\"ngModel\"\n    />\n  </div>\n  <p *ngIf=\"errorMessage && !isValid\" class=\"bmb__field--helper\">\n    {{ errorMessage }}\n  </p>\n</div>\n"
        },
        {
            "name": "BmbInteractiveIconComponent",
            "id": "component-BmbInteractiveIconComponent-36373433db7b0f8b306fb4b0ccd3704fe2098ab04ed7dfb05daa8d82d2b573852e6c785102bc5d7550246630b3a22e915d5638d806beb78ace5196f6dc33359f",
            "file": "projects/ds-ng/src/lib/components/bmb-interactive-icon/bmb-interactive-icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-interactive-icon",
            "styleUrls": [
                "../../../assets/styles/components/_interactiveIcon.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-interactive-icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appearance",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "grouped",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Renderer2,\n  AfterViewInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'bmb-interactive-icon',\n  templateUrl: './bmb-interactive-icon.component.html',\n  styleUrls: ['../../../assets/styles/components/_interactiveIcon.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbInteractiveIconComponent implements AfterViewInit {\n  @Input() appearance: string = '';\n  @Input() text: string = '';\n  @Input() icon: string = '';\n  @Input() image: string = '';\n  @Input() grouped: boolean = false;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterViewInit() {\n    if (this.grouped) {\n      const parentElement = this.el.nativeElement.parentElement;\n\n      let wrapperDiv = parentElement.querySelector(\n        '.interactive__icon--grouped'\n      );\n      if (!wrapperDiv) {\n        wrapperDiv = this.renderer.createElement('div');\n        this.renderer.addClass(wrapperDiv, 'interactive__icon--grouped');\n        this.renderer.insertBefore(parentElement, wrapperDiv, null);\n      }\n\n      this.renderer.appendChild(wrapperDiv, this.el.nativeElement);\n    }\n  }\n\n  getClasses(): string[] {\n    const classes: string[] = ['interactive__icon'];\n\n    if (this.appearance) {\n      classes.push('interactive__icon--' + this.appearance);\n    }\n\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../tokens/colors\";\n@import \"../base/rem\";\n@import \"../base/measures\";\n@import \"../base/fonts\";\n\n.interactive__icon {\n  align-items: center;\n  display: flex;\n  flex-flow: column;\n  width: rem_calc(64);\n\n  &--grouped {\n    display: flex;\n    flex-flow: row wrap;\n    gap: $spacing-size-lg;\n  }\n\n  &--box {\n    align-items: center;\n    border-radius: $spacing-size-md;\n    display: flex;\n    height: rem_calc(64);\n    justify-content: center;\n    width: rem_calc(64);\n  }\n\n  &--icon,\n  &--image {\n    height: rem_calc(32);\n    width: rem_calc(32);\n  }\n\n  &--icon {\n    color: RGBA(var(--color-white-primary));\n    font-size: rem_calc(32);\n  }\n\n  &--text {\n    display: block;\n    margin-top: $spacing-size-md;\n    @include font(3, regular);\n    color: RGBA(var(--color-white-primary));\n    text-align: center;\n  }\n\n  &--red {\n    .interactive__icon--box {\n      background-color: RGBA(var(--color-red-primary));\n    }\n  }\n\n  &--blue {\n    .interactive__icon--box {\n      background-color: RGBA(var(--color-mariner-700));\n    }\n  }\n\n  &--green {\n    .interactive__icon--box {\n      background-color: RGBA(var(--color-green-primary));\n    }\n  }\n\n  &--yellow {\n    .interactive__icon--box {\n      background-color: RGBA(var(--color-yellow-primary));\n    }\n  }\n\n  &--purple {\n    .interactive__icon--box {\n      background-color: RGBA(var(--color-purple-primary));\n    }\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_interactiveIcon.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div [ngClass]=\"getClasses()\">\n  <div class=\"interactive__icon--box\">\n    <bmb-icon\n      class=\"interactive__icon--icon\"\n      icon=\"{{ icon }}\"\n      *ngIf=\"!image\"\n    />\n    <img\n      *ngIf=\"image\"\n      [src]=\"image\"\n      alt=\"text\"\n      class=\"interactive__icon--image\"\n    />\n  </div>\n  <span class=\"interactive__icon--text\" *ngIf=\"text\">{{ text }}</span>\n</div>\n"
        },
        {
            "name": "BmbLogoComponent",
            "id": "component-BmbLogoComponent-475037835bf5886fa82be5008b587bbd10dc29ea72fc6a6a45835c2646a2058e68cedc636a0fdb8c679b81bdceabd58a6effefd06a93de43d1d5243b310debb0",
            "file": "projects/ds-ng/src/lib/components/bmb-logo/bmb-logo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-logo",
            "styleUrls": [
                "../../../assets/styles/components/_logo.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "altImage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'bmb-logo',\n  templateUrl: './bmb-logo.component.html',\n  styleUrls: ['../../../assets/styles/components/_logo.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbLogoComponent {\n  @Input() size: string = '';\n  @Input() image: string = '';\n  @Input() altImage: string = '';\n\n  getClasses(): string[] {\n    const classes: string[] = ['logo'];\n\n    if (this.size) {\n      classes.push('logo--' + this.size);\n    }\n\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../tokens/colors\";\n@import \"../base/rem\";\n\n.logo {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  overflow: hidden;\n\n  img {\n    height: 100%;\n    width: 100%;\n  }\n\n  &--small {\n    width: rem_calc(32);\n  }\n\n  &--medium {\n    width: rem_calc(120);\n  }\n\n  &--large {\n    width: rem_calc(240);\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_logo.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div [ngClass]=\"getClasses()\">\n  <img [src]=\"image\" [alt]=\"altImage\" />\n</div>\n"
        },
        {
            "name": "BmbTextInputComponent",
            "id": "component-BmbTextInputComponent-882df5006ef193bac6d0a058ec29223347827e5952ea9cf6248d9f123b0cffe9c599858b892fdcd9f3943e5d2d465e13fdfc23fcf7a4d3a69bf3d697797381bf",
            "file": "projects/ds-ng/src/lib/components/bmb-text-input/bmb-text-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[bmb-text-input]",
            "styleUrls": [
                "../../../assets/styles/components/_text-inputs.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-text-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appearance",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"normal\" | \"simple\" | \"main\"",
                    "decorators": []
                },
                {
                    "name": "device",
                    "defaultValue": "'desktop'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"mobile\" | \"desktop\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"text\" | \"date\" | \"datetime\" | \"email\" | \"number\" | \"password\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.ng-invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  ChangeDetectionStrategy, \n  HostBinding, \n  Optional, \n  Input,\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n@Component({\n  selector: '[bmb-text-input]',\n  templateUrl: './bmb-text-input.component.html',\n  styleUrls: ['../../../assets/styles/components/_text-inputs.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbTextInputComponent {\n\n  @Input() appearance: 'normal' | 'simple' | 'main' = 'normal';\n  @Input() device: 'mobile' | 'desktop' = 'desktop';\n  @Input() type: 'text' | 'date' | 'datetime' | 'email' | 'number' | 'password' = 'text'\n\n\n  @HostBinding('class.ng-invalid')\n  get invalid(): boolean {\n    return this._ngControl?.invalid ?? false;\n  }  \n\n  @HostBinding('class') get elementClass(): string {\n    return `bmb-input-${this.appearance} bmb-input-${this.device}`;\n  }\n\n\n  constructor(\n    @Optional() \n    private readonly _ngControl?: NgControl,\n    ){\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../tokens/colors\";\n@import \"../base/rem\";\n@import \"../base/measures\";\n@import \"../base/fonts\";\n@import \"../base/mixins\";\n\n.bmb-input {\n  &.ng-invalid {\n    border-color: RGBA(var(--color-red-primary));\n  }\n\n  &-main {\n    @include inputType(main);\n    @include inputPad(s);\n  }\n\n  &-simple {\n    @include inputType(simple);\n    @include inputPad(s);\n  }\n\n  &-normal {\n    @include inputType(normal);\n    @include inputPad(s);\n  }\n\n  &.ng-invalid {\n    border-color: RGBA(var(--color-red-primary));\n  }\n}\n\n// Styles for error message in input\n.bmb-text-error {\n  @include font(2, medium);\n  color: RGBA(var(--color-red-primary));\n  padding: rem_calc(4) rem_calc(8) rem_calc(8) rem_calc(8);\n}\n\n.bmb-text-msg {\n  @include font(2, medium);\n  color: RGBA(var(--color-black));\n  padding: rem_calc(8) rem_calc(8) rem_calc(4) rem_calc(8);\n}\n",
                    "styleUrl": "../../../assets/styles/components/_text-inputs.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "invalid": {
                    "name": "invalid",
                    "getSignature": {
                        "name": "invalid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 24
                    }
                },
                "elementClass": {
                    "name": "elementClass",
                    "getSignature": {
                        "name": "elementClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                }
            },
            "templateData": ""
        },
        {
            "name": "BmbThemeComponent",
            "id": "component-BmbThemeComponent-ac0dfa809336fc4e9b41646cfa108d98105009f1512497e7216d17b20719cf10ddac3450ec3bd9b4a9bb44315bb7ae4dacc3b485b8868bb38ac03b3a9494bb37",
            "file": "projects/ds-ng/src/lib/components/bmb-theme/bmb-theme.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-theme",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./bmb-theme.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTheme",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "applyTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onThemeChange",
                    "args": [
                        {
                            "name": "newTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newTheme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ThemeService } from '../../services/theme.service';\n\n@Component({\n  selector: 'bmb-theme',\n  templateUrl: './bmb-theme.component.html',\n})\nexport class BmbThemeComponent implements OnInit {\n  selectedTheme: string = 'light';\n\n  constructor(private themeService: ThemeService) {}\n\n  ngOnInit(): void {\n    this.themeService.theme$.subscribe((theme) => {\n      this.applyTheme(theme);\n    });\n  }\n\n  applyTheme(theme: string): void {\n    document.documentElement.setAttribute('data-theme', theme);\n  }\n\n  onThemeChange(newTheme: string): void {\n    this.selectedTheme = newTheme;\n    this.themeService.setTheme(this.selectedTheme);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"bmb-theme\">\n  <button\n    (click)=\"onThemeChange('dark')\"\n    [class.selected]=\"selectedTheme === 'dark'\"\n  >\n    Dark\n  </button>\n  <button\n    (click)=\"onThemeChange('light')\"\n    [class.selected]=\"selectedTheme === 'light'\"\n  >\n    Light\n  </button>\n  <button\n    (click)=\"onThemeChange('blue')\"\n    [class.selected]=\"selectedTheme === 'blue'\"\n  >\n    Blue\n  </button>\n</div>\n"
        },
        {
            "name": "BmbUserImageComponent",
            "id": "component-BmbUserImageComponent-c73730de80dad606240fb250727b12722f8bc6b080aef88c35710196928b3a386138690dde5c92a06b38593b7d017f6054d33d30612aedc7251e11c0426e0f99",
            "file": "projects/ds-ng/src/lib/components/bmb-user-image/bmb-user-image.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-user-image",
            "styleUrls": [
                "../../../assets/styles/components/_userImage.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bmb-user-image.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "altImage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'bmb-user-image',\n  templateUrl: './bmb-user-image.component.html',\n  styleUrls: ['../../../assets/styles/components/_userImage.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BmbUserImageComponent {\n  @Input() size: string = '';\n  @Input() image: string = '';\n  @Input() altImage: string = '';\n\n  getClasses(): string[] {\n    const classes: string[] = ['user__image'];\n\n    if (this.size) {\n      classes.push('user__image--' + this.size);\n    }\n\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../tokens/colors\";\n@import \"../base/rem\";\n\n.user__image {\n  align-items: center;\n  background-color: RGBA(var(--color-mariner-900));\n  border-radius: 100%;\n  display: flex;\n  height: rem_calc(50);\n  justify-content: center;\n  overflow: hidden;\n  width: rem_calc(50);\n\n  img {\n    height: 100%;\n    width: 100%;\n  }\n\n  &--mobile-small {\n    height: rem_calc(32);\n    width: rem_calc(32);\n  }\n\n  &--mobile-medium {\n    height: rem_calc(64);\n    width: rem_calc(64);\n  }\n\n  &--mobile-large {\n    height: rem_calc(100);\n    width: rem_calc(100);\n  }\n\n  &--mobile-xlarge {\n    height: rem_calc(200);\n    width: rem_calc(200);\n  }\n\n  &--desktop-small {\n    height: rem_calc(56);\n    width: rem_calc(56);\n  }\n\n  &--desktop-large {\n    height: rem_calc(160);\n    width: rem_calc(160);\n  }\n}\n",
                    "styleUrl": "../../../assets/styles/components/_userImage.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div [ngClass]=\"getClasses()\">\n  <img [src]=\"image\" [alt]=\"altImage\" />\n</div>\n"
        },
        {
            "name": "DsNgComponent",
            "id": "component-DsNgComponent-e5efb1b6556ee93e3913add9b5651e7b82e4636efa0258c5ec4004d9377daadf8ed4ee72e8c9a31f2e6c5a39cb5057a783dea7b30a455c96c346b954f6d418cd",
            "file": "projects/ds-ng/src/lib/ds-ng.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bmb-ds-ng",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "template": "<p>\n  ds-ng works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'bmb-ds-ng',\n  template: `\n    <p>\n      ds-ng works!\n    </p>\n  `,\n  styles: ``\n})\nexport class DsNgComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "extends": []
        }
    ],
    "modules": [
        {
            "name": "DsNgModule",
            "id": "module-DsNgModule-b67c99456d8ec0def976dac17b29752419ef7580d45283ae03b956be131573d80c277d19c69c20870ef1b3ead57c940b5bab8b56dbc3fa9a0a7b27dbf47014e1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ds-ng/src/lib/ds-ng.module.ts",
            "methods": [
                {
                    "name": "ngDoBootsrap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "sourceCode": "import { NgModule, Injector, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { BmbButtonDirective } from './directives/button.directive';\nimport { DsNgComponent } from './ds-ng.component';\nimport { BmbLogoComponent } from './components/bmb-logo/bmb-logo.component';\nimport { BmbIconComponent } from './components/bmb-icon/bmb-icon.component';\nimport { BmbAlertComponent } from './components/bmb-alert/bmb-alert.component';\nimport { BmbThemeComponent } from './components/bmb-theme/bmb-theme.component';\nimport { BmbBadgeComponent } from './components/bmb-badge/bmb-badge.component';\nimport { BmbInputComponent } from './components/bmb-input/bmb-input.component';\nimport { BmbDividerComponent } from './components/bmb-divider/bmb-divider.component';\nimport { BmbContainerComponent } from './components/bmb-container/bmb-container.component';\nimport { BmbUserImageComponent } from './components/bmb-user-image/bmb-user-image.component';\nimport { BmbTextInputComponent } from './components/bmb-text-input/bmb-text-input.component';\nimport { BmbHeaderMobileComponent } from './components/bmb-header-mobile/bmb-header-mobile.component';\nimport { BmbIconTextInputComponent } from './components/bmb-icon-text-input/bmb-icon-text-input.component';\nimport { BmbDotPaginatorComponent } from './components/bmb-dot-paginator/bmb-dot-paginator.component';\nimport { BmbInteractiveIconComponent } from './components/bmb-interactive-icon/bmb-interactive-icon.component';\n\n@NgModule({\n  declarations: [\n    DsNgComponent,\n    BmbLogoComponent,\n    BmbIconComponent,\n    BmbThemeComponent,\n    BmbAlertComponent,\n    BmbBadgeComponent,\n    BmbInputComponent,\n    BmbButtonDirective,\n    BmbDividerComponent,\n    BmbContainerComponent,\n    BmbTextInputComponent,\n    BmbUserImageComponent,\n    BmbHeaderMobileComponent,\n    BmbDotPaginatorComponent,\n    BmbIconTextInputComponent,\n    BmbInteractiveIconComponent,\n  ],\n  imports: [CommonModule, FormsModule],\n  exports: [\n    DsNgComponent,\n    BmbLogoComponent,\n    BmbIconComponent,\n    BmbBadgeComponent,\n    BmbAlertComponent,\n    BmbThemeComponent,\n    BmbInputComponent,\n    BmbButtonDirective,\n    BmbDividerComponent,\n    BmbUserImageComponent,\n    BmbContainerComponent,\n    BmbTextInputComponent,\n    BmbHeaderMobileComponent,\n    BmbDotPaginatorComponent,\n    BmbIconTextInputComponent,\n    BmbInteractiveIconComponent,\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class DsNgModule {\n  constructor(private injector: Injector) {}\n\n  ngDoBootsrap() {\n    const customInputWrapper = createCustomElement(BmbIconTextInputComponent, {\n      injector: this.injector,\n    });\n    customElements.define('bmb-input-wrapper', customInputWrapper);\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BmbAlertComponent"
                        },
                        {
                            "name": "BmbBadgeComponent"
                        },
                        {
                            "name": "BmbButtonDirective"
                        },
                        {
                            "name": "BmbContainerComponent"
                        },
                        {
                            "name": "BmbDividerComponent"
                        },
                        {
                            "name": "BmbDotPaginatorComponent"
                        },
                        {
                            "name": "BmbHeaderMobileComponent"
                        },
                        {
                            "name": "BmbIconComponent"
                        },
                        {
                            "name": "BmbIconTextInputComponent"
                        },
                        {
                            "name": "BmbInputComponent"
                        },
                        {
                            "name": "BmbInteractiveIconComponent"
                        },
                        {
                            "name": "BmbLogoComponent"
                        },
                        {
                            "name": "BmbTextInputComponent"
                        },
                        {
                            "name": "BmbThemeComponent"
                        },
                        {
                            "name": "BmbUserImageComponent"
                        },
                        {
                            "name": "DsNgComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BmbAlertComponent"
                        },
                        {
                            "name": "BmbBadgeComponent"
                        },
                        {
                            "name": "BmbButtonDirective"
                        },
                        {
                            "name": "BmbContainerComponent"
                        },
                        {
                            "name": "BmbDividerComponent"
                        },
                        {
                            "name": "BmbDotPaginatorComponent"
                        },
                        {
                            "name": "BmbHeaderMobileComponent"
                        },
                        {
                            "name": "BmbIconComponent"
                        },
                        {
                            "name": "BmbIconTextInputComponent"
                        },
                        {
                            "name": "BmbInputComponent"
                        },
                        {
                            "name": "BmbInteractiveIconComponent"
                        },
                        {
                            "name": "BmbLogoComponent"
                        },
                        {
                            "name": "BmbTextInputComponent"
                        },
                        {
                            "name": "BmbThemeComponent"
                        },
                        {
                            "name": "BmbUserImageComponent"
                        },
                        {
                            "name": "DsNgComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "customizable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/directives/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): StoryFn => (args) => ({\n  props: args,\n  template: `<button bmbButton ${attributes(args)}>${attributesText(\n    args\n  )}</button>`,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/directives/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "customizable()"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/components/bmb-alert/bmb-alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/components/bmb-badge/bmb-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/components/bmb-container/bmb-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/components/bmb-header-mobile/bmb-header-mobile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/components/bmb-icon/bmb-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/components/bmb-interactive-icon/bmb-interactive-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/components/bmb-logo/bmb-logo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/src/lib/components/bmb-user-image/bmb-user-images.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ds-ng/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      expanded: true,\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n    docs: {\n      source: { language: 'html' },\n      canvas: {\n        sourceState: 'shown',\n      },\n    },\n  },\n}"
            }
        ],
        "functions": [
            {
                "name": "attributes",
                "file": "projects/ds-ng/src/lib/directives/button.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "attributesText",
                "file": "projects/ds-ng/src/lib/directives/button.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BmbAlertComponent>",
                "file": "projects/ds-ng/src/lib/components/bmb-alert/bmb-alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BmbBadgeComponent>",
                "file": "projects/ds-ng/src/lib/components/bmb-badge/bmb-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BmbContainerComponent>",
                "file": "projects/ds-ng/src/lib/components/bmb-container/bmb-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BmbHeaderMobileComponent>",
                "file": "projects/ds-ng/src/lib/components/bmb-header-mobile/bmb-header-mobile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BmbIconComponent>",
                "file": "projects/ds-ng/src/lib/components/bmb-icon/bmb-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BmbInteractiveIconComponent>",
                "file": "projects/ds-ng/src/lib/components/bmb-interactive-icon/bmb-interactive-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BmbLogoComponent>",
                "file": "projects/ds-ng/src/lib/components/bmb-logo/bmb-logo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BmbUserImageComponent>",
                "file": "projects/ds-ng/src/lib/components/bmb-user-image/bmb-user-images.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ds-ng/src/lib/directives/button.stories.ts": [
                {
                    "name": "customizable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/directives/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): StoryFn => (args) => ({\n  props: args,\n  template: `<button bmbButton ${attributes(args)}>${attributesText(\n    args\n  )}</button>`,\n})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/directives/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "customizable()"
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-alert/bmb-alert.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/components/bmb-alert/bmb-alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-badge/bmb-badge.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/components/bmb-badge/bmb-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-container/bmb-container.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/components/bmb-container/bmb-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-header-mobile/bmb-header-mobile.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/components/bmb-header-mobile/bmb-header-mobile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-icon/bmb-icon.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/components/bmb-icon/bmb-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-interactive-icon/bmb-interactive-icon.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/components/bmb-interactive-icon/bmb-interactive-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-logo/bmb-logo.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/components/bmb-logo/bmb-logo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-user-image/bmb-user-images.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/src/lib/components/bmb-user-image/bmb-user-images.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                }
            ],
            "projects/ds-ng/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ds-ng/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      expanded: true,\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n    docs: {\n      source: { language: 'html' },\n      canvas: {\n        sourceState: 'shown',\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ds-ng/src/lib/directives/button.stories.ts": [
                {
                    "name": "attributes",
                    "file": "projects/ds-ng/src/lib/directives/button.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "attributesText",
                    "file": "projects/ds-ng/src/lib/directives/button.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ds-ng/src/lib/components/bmb-alert/bmb-alert.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BmbAlertComponent>",
                    "file": "projects/ds-ng/src/lib/components/bmb-alert/bmb-alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-badge/bmb-badge.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BmbBadgeComponent>",
                    "file": "projects/ds-ng/src/lib/components/bmb-badge/bmb-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-container/bmb-container.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BmbContainerComponent>",
                    "file": "projects/ds-ng/src/lib/components/bmb-container/bmb-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-header-mobile/bmb-header-mobile.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BmbHeaderMobileComponent>",
                    "file": "projects/ds-ng/src/lib/components/bmb-header-mobile/bmb-header-mobile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-icon/bmb-icon.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BmbIconComponent>",
                    "file": "projects/ds-ng/src/lib/components/bmb-icon/bmb-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-interactive-icon/bmb-interactive-icon.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BmbInteractiveIconComponent>",
                    "file": "projects/ds-ng/src/lib/components/bmb-interactive-icon/bmb-interactive-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-logo/bmb-logo.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BmbLogoComponent>",
                    "file": "projects/ds-ng/src/lib/components/bmb-logo/bmb-logo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ds-ng/src/lib/components/bmb-user-image/bmb-user-images.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BmbUserImageComponent>",
                    "file": "projects/ds-ng/src/lib/components/bmb-user-image/bmb-user-images.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ds-ng/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-alert/bmb-alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbAlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-alert/bmb-alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-badge/bmb-badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbBadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-badge/bmb-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-container/bmb-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-container/bmb-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-divider/bmb-divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbDividerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-dot-paginator/bmb-dot-paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbDotPaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-dot-paginator/bmb-dot-paginator.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Props",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-dot-paginator/bmb-dot-paginator.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Target",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-header-mobile/bmb-header-mobile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbHeaderMobileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-header-mobile/bmb-header-mobile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-icon-text-input/bmb-icon-text-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbIconTextInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-icon/bmb-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-icon/bmb-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-input/bmb-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-interactive-icon/bmb-interactive-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbInteractiveIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-interactive-icon/bmb-interactive-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-logo/bmb-logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbLogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-logo/bmb-logo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-text-input/bmb-text-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbTextInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-theme/bmb-theme.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbThemeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-user-image/bmb-user-image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BmbUserImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/components/bmb-user-image/bmb-user-images.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/directives/button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BmbButtonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/directives/button.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "attributes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/directives/button.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "attributesText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/directives/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customizable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/directives/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/ds-ng.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DsNgComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/ds-ng.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DsNgService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ds-ng/src/lib/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            }
        ]
    }
}